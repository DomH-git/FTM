#include <errno.h>
#include <stdio.h>
#include <string.h>
#include "nvs_flash.h"
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_err.h"
#include "esp_wifi.h"
#include "esp_mac.h"

static bool s_reconnect = true;
static const char *TAG_ANCHOR = "gtec-ftm-anchor";

static EventGroupHandle_t wifi_event_group;
const int CONNECTED_BIT = BIT0;
const int DISCONNECTED_BIT = BIT1;

const wifi_bandwidth_t CURRENT_BW = WIFI_BW_HT20;
const uint8_t CURRENT_CHANNEL = 1;

// Event handler for AP station connected
static void wifi_ap_sta_connected_handler(void *arg, esp_event_base_t event_base,
                                          int32_t event_id, void *event_data)
{
    wifi_event_ap_staconnected_t *event = (wifi_event_ap_staconnected_t *)event_data;
    ESP_LOGI(TAG_ANCHOR, "Station connected: " MACSTR, MAC2STR(event->mac));
}

// Event handler for AP station disconnected
static void wifi_ap_sta_disconnected_handler(void *arg, esp_event_base_t event_base,
                                             int32_t event_id, void *event_data)
{
    wifi_event_ap_stadisconnected_t *event = (wifi_event_ap_stadisconnected_t *)event_data;
    ESP_LOGI(TAG_ANCHOR, "Station disconnected: " MACSTR, MAC2STR(event->mac));
}

void initialise_wifi(void)
{
    static bool initialized = false;

    if (initialized) {
        return;
    }

    ESP_ERROR_CHECK(esp_netif_init());
    wifi_event_group = xEventGroupCreate();
    ESP_ERROR_CHECK(esp_event_loop_create_default());

    // Create default Wi-Fi AP netif
    esp_netif_create_default_wifi_ap();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    // Register AP event handlers
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                    WIFI_EVENT_AP_STACONNECTED,
                                                    &wifi_ap_sta_connected_handler,
                                                    NULL,
                                                    NULL));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                    WIFI_EVENT_AP_STADISCONNECTED,
                                                     &wifi_ap_sta_disconnected_handler,
                                                     NULL,
                                                    NULL));

    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_NULL));

    ESP_ERROR_CHECK(esp_wifi_set_bandwidth(ESP_IF_WIFI_AP, CURRENT_BW));
    ESP_ERROR_CHECK(esp_wifi_start());

    // Disable Wi-Fi power saving mode to allow maximum radio performance.
    ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));

    initialized = true;
}

static bool start_wifi_ap(const char* ssid, const char* pass)
{
    wifi_config_t wifi_config = {
        .ap = {
            .ssid = "",
            .ssid_len = strlen(""),
            .password = "",
            .max_connection = 4,
            .authmode = WIFI_AUTH_OPEN,
            .channel = CURRENT_CHANNEL,
        },
    };

    // Set the FTM capability flag in the AP configuration
    wifi_config.ap.ftm_responder = true;

    s_reconnect = false;
    strlcpy((char*) wifi_config.ap.ssid, ssid, sizeof(wifi_config.ap.ssid));
    strlcpy((char*) wifi_config.ap.password, pass, sizeof(wifi_config.ap.password));

    if (strlen(pass) == 0) {
        wifi_config.ap.authmode = WIFI_AUTH_OPEN;
    }

    // Set transmit power to maximum strength.
    // Note: The value is specified in quarter-dBm. Here 78 corresponds to ~19.5 dBm.
    uint8_t tx_power = 78;
    ESP_ERROR_CHECK(esp_wifi_set_max_tx_power(tx_power));

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
    ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_AP, &wifi_config));
    return true;
}

void app_main(void)
{
    uint8_t mac[6];
    char mac_add[32];  // Increased size to accommodate "ftm_" prefix and null terminator

    wifi_bandwidth_t bw;

    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    initialise_wifi();

    printf("\n ==========================================================\n");
    printf(" |                      ESP32 S2 FTM ANCHOR               |\n");
    printf(" ==========================================================\n\n");

    // GET MAC ADDRESS
    ESP_ERROR_CHECK(esp_base_mac_addr_get(mac));
    snprintf(mac_add, sizeof(mac_add), "ftm_%02X%02X%02X%02X%02X%02X",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);

    // Start AP
    start_wifi_ap(mac_add, "ftmftmftmftm");

    ESP_ERROR_CHECK(esp_wifi_get_bandwidth(ESP_IF_WIFI_AP, &bw));
    if (bw == WIFI_BW_HT20){
        printf("BW = 20MHz\n");
    } else {
        printf("BW = 40MHz\n");
    }
    printf("Starting SoftAP with FTM Responder support, SSID - %s\n", mac_add);
}